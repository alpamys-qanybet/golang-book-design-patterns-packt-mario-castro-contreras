Chapter One

Functions can be declared as variadic. This means that its number of arguments can vary.

code:

package main

import "fmt"

// This function intSeq returns another function, which we define anonymously in the body of intSeq. The returned function closes over the variable i to form a closure.
func intSeq() func() int {
	i := 0
	return func() int {
		i++
		return i
	}
}

func main() {
	// We call intSeq, assigning the result (a function) to nextInt. This function value captures its own i value, which will be updated each time we call nextInt.
	nextInt := intSeq()

	// See the effect of the closure by calling nextInt a few times.
	fmt.Println(nextInt())
	fmt.Println(nextInt())
	fmt.Println(nextInt())

	// To confirm that the state is unique to that particular function, create and test a new one.
	newInts := intSeq()
	fmt.Println(newInts())
	fmt.Println(newInts())

	fmt.Println(nextInt())
	fmt.Println(nextInt())

	fmt.Println(newInts())
	fmt.Println(newInts())

}

/*

1
2
3
1
2
4
5
3
4

*/


=============================================================================================================================

Chapter Two

The Singleton pattern is easy to remember. As the name implies, it will provide you with a single instance of an object, and guarantee that there are no duplicates.

As a general guide, we consider using the Singleton pattern when the following rule applies:
- We need a single, shared value, of some particular type.
- We need to restrict object creation of some type to a single unit along the entire program.
